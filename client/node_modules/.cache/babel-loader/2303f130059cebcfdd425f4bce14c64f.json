{"ast":null,"code":"import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT_SUCCESS, REGISTER_SUCCESS, REGISTER_FAIL } from \"./types\"; // Check token & load user\n\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get(\"/api/auth/user\", tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; // Register User\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }; // Request body\n\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post(\"/api/users\", body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\"));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; // Logout User\n\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS\n  };\n}; // Setup config/headers and token\n\nexport const tokenConfig = getState => {\n  // Get token from localstorage\n  const token = getState().auth.token; // Headers\n\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\"\n    }\n  }; // if token, add to headers\n\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/r2b/Desktop/DEV/MERN_450_v1/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT_SUCCESS","REGISTER_SUCCESS","REGISTER_FAIL","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","logout","token","auth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAEA,SACEC,WADF,EAEEC,YAFF,EAGEC,UAHF,EAIEC,aAJF,EAKEC,UALF,EAMEC,cANF,EAOEC,gBAPF,EAQEC,aARF,QASO,SATP,C,CAWA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AACpD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AAEAH,EAAAA,KAAK,CACFc,GADH,CACO,gBADP,EACyBC,WAAW,CAACH,QAAD,CADpC,EAEGI,IAFH,CAESC,GAAD,IACJN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEX,WADC;AAEPgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD,GAbH;AAcD,CAlBM,C,CAoBP;;AACA,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAAgChB,QAAD,IAAc;AACnE;AACA,QAAMiB,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CAFmE,CAQnE;;AACA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AAEA3B,EAAAA,KAAK,CACFiC,IADH,CACQ,YADR,EACsBH,IADtB,EAC4BF,MAD5B,EAEGZ,IAFH,CAESC,GAAD,IACJN,QAAQ,CAAC;AACPE,IAAAA,IAAI,EAAEL,gBADC;AAEPU,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFN,GAAD,CAHZ,EAQGC,KARH,CAQUC,GAAD,IAAS;AACdV,IAAAA,QAAQ,CACNV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CADN,CAAR;AAGAZ,IAAAA,QAAQ,CAAC;AACPE,MAAAA,IAAI,EAAEJ;AADC,KAAD,CAAR;AAGD,GAfH;AAgBD,CA3BM,C,CA6BP;;AACA,OAAO,MAAMyB,MAAM,GAAG,MAAM;AAC1B,SAAO;AACLrB,IAAAA,IAAI,EAAEN;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMQ,WAAW,GAAIH,QAAD,IAAc;AACvC;AACA,QAAMuB,KAAK,GAAGvB,QAAQ,GAAGwB,IAAX,CAAgBD,KAA9B,CAFuC,CAIvC;;AACA,QAAMP,MAAM,GAAG;AACbC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AADI,GAAf,CALuC,CAWvC;;AACA,MAAIM,KAAJ,EAAW;AACTP,IAAAA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiCM,KAAjC;AACD;;AAED,SAAOP,MAAP;AACD,CAjBM","sourcesContent":["import axios from \"axios\";\nimport { returnErrors } from \"./errorActions\";\n\nimport {\n  USER_LOADED,\n  USER_LOADING,\n  AUTH_ERROR,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n} from \"./types\";\n\n// Check token & load user\nexport const loadUser = () => (dispatch, getState) => {\n  // User loading\n  dispatch({ type: USER_LOADING });\n\n  axios\n    .get(\"/api/auth/user\", tokenConfig(getState))\n    .then((res) =>\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data,\n      })\n    )\n    .catch((err) => {\n      dispatch(returnErrors(err.response.data, err.response.status));\n      dispatch({\n        type: AUTH_ERROR,\n      });\n    });\n};\n\n// Register User\nexport const register = ({ name, email, password }) => (dispatch) => {\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n\n  // Request body\n  const body = JSON.stringify({ name, email, password });\n\n  axios\n    .post(\"/api/users\", body, config)\n    .then((res) =>\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data,\n      })\n    )\n    .catch((err) => {\n      dispatch(\n        returnErrors(err.response.data, err.response.status, \"REGISTER_FAIL\")\n      );\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n    });\n};\n\n// Logout User\nexport const logout = () => {\n  return {\n    type: LOGOUT_SUCCESS,\n  };\n};\n\n// Setup config/headers and token\nexport const tokenConfig = (getState) => {\n  // Get token from localstorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // if token, add to headers\n  if (token) {\n    config.headers[\"x-auth-token\"] = token;\n  }\n\n  return config;\n};\n"]},"metadata":{},"sourceType":"module"}